set nocompatible

call plug#begin('~/.vim/bundle')

" Plug 'dgraham/vim-eslint'
" Plug 'pangloss/vim-javascript'
" Plug 'ziglang/zig.vim'
Plug 'gioele/vim-autoswap'
Plug 'inkarkat/vim-SyntaxRange'
Plug 'cespare/vim-toml'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-commentary'
Plug 'airblade/vim-gitgutter'
Plug 'LnL7/vim-nix'
Plug 'arp242/gopher.vim'
Plug 'plasticboy/vim-markdown'
Plug 'godlygeek/tabular'
Plug 'bogado/file-line'
Plug 'rhysd/conflict-marker.vim'

"Firefox Neovim client mumbo-jumbo"
Plug 'raghur/vim-ghost', {'do': ':GhostInstall'}

"Markdown preview w/ math support"
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install &> /tmp/mdp'  }

"Autocomplete brackets/parens/etc like vscode"
Plug 'jiangmiao/auto-pairs'

"Icons"
Plug 'ryanoasis/vim-devicons'

"Autocompletion"
Plug 'dense-analysis/ale'

call plug#end()

"Better mouse support"
set mouse=a
vmap <C-c> "+y
vmap <C-v> "+p
imap <C-v> "+p
map - dd

"Speed"
set updatetime=100

"Make comments italiced
hi Comment cterm=italic

"Auto-commands for type-specific files"
autocmd BufRead,BufNewFile *.nix    setlocal noautoindent
autocmd BufRead,BufNewFile *.nix    setlocal noexpandtab
autocmd BufRead,BufNewFile *.nix    setlocal shiftwidth=4
autocmd BufRead,BufNewFile *.md     setlocal spell
autocmd BufRead,BufNewFile *.vue    syntax sync fromstart
autocmd BufRead,BufNewFile *.vugu   setlocal filetype=html
autocmd BufRead,BufNewFile *.svelte setlocal filetype=html
autocmd BufRead,BufNewFile *.svelte setlocal syntax=html
autocmd BufRead,BufNewFile .env*    setlocal syntax=sh

"Special highlighting for Vugu"
call SyntaxRange#Include('<script type="application/x-go">', '</script>', 'go')

"Go to last cursor on file open"
autocmd BufReadPost *
	\ if line("'\"") >= 1 && line("'\"") <= line("$") |
	\   exe "normal! g`\"" |
	\ endif

"Autoindent"
set smartindent
filetype indent on

"Tab size 4"
set tabstop=4
set shiftwidth=4

"Better colors and highlighting"
let g:material_terminal_italics = 1
let g:material_theme_style='lighter'
set background=light
"Transparent background"
hi Normal guibg=NONE ctermbg=NONE

"Tweaks"
filetype plugin indent on
syntax on

"Custom colors"
hi Todo     ctermbg=14
hi Search   ctermbg=14   ctermfg=0
hi SpellBad ctermbg=NONE cterm=undercurl guisp=#FF6961

hi StatusLine   ctermfg=5
hi StatusLineNC ctermfg=13

hi Comment ctermfg=4

hi Constant ctermfg=15
hi Number   ctermfg=5
hi Boolean  ctermfg=5

hi Identifier ctermfg=6
hi Function   ctermfg=15

hi Statement ctermfg=3
hi Operator  ctermfg=15

hi Type ctermfg=2

hi SignColumn   ctermbg=NONE
hi EndOfBuffer  ctermfg=7
hi QuickFixLine cterm=reverse

"Change NERDTree's colors"
hi CursorLine    ctermbg=7 cterm=NONE
hi Directory     ctermfg=14
hi NERDTreeFlags ctermfg=6

"NERDTree executable highlight but also something else"
hi Title ctermfg=10

"Hide the trailing slash next to the directories"
augroup nerdtreehidecwd
	autocmd!
	autocmd FileType nerdtree setlocal conceallevel=3 | syntax match NERDTreeDirSlash #/$# containedin=NERDTreeDir conceal contained
augroup end

"Hide the cursor for NERDTree; rely on the background"
autocmd FileType nerdtree hi Cursor 

"Custom cursor mode: normal-visual block, insert-command IBeam"
set guicursor=n-v-sm:block
set guicursor+=i-c-ci-ve:ver25
set guicursor+=r-cr-o:hor20

"Change completion colors"
hi Pmenu    ctermbg=2 ctermfg=0
hi PmenuSel ctermfg=15

"Extra Go colors"
hi goParamName       ctermfg=15
hi goReceiverType    ctermfg=15
hi goTypeConstructor ctermfg=15
hi goTypeName        ctermfg=15
hi goFunctionCall    ctermfg=15

"Resume past cursor location on open"
au InsertLeave * call cursor([getpos('.')[1], getpos('.')[2]+1])

"Autoindentation"
set autoindent

"Give ALE errors red undercurls"
hi ALEError cterm=undercurl gui=undercurl guisp=#FF6961

"Hide NERDTree arrows"
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

"ToggleWrap from the vim wiki"
set linebreak
nnoremap <Up>   gk
nnoremap <Down> gj
nnoremap <Home> g<Home>
nnoremap <End>  g<End>

"Backups"
"Turn on backup option
set backup
set backupdir=~/.vim/backup/
set writebackup
set backupcopy=no
au BufWritePre * let &bex = '@' . strftime("%F.%H:%M")

"Better highlighting, less broken"
autocmd BufEnter * :syntax sync fromstart
syntax sync minlines=100

"Custom keybinds"
map <Tab> :NERDTreeToggle<CR> <bar> :NERDTreeRefreshRoot<CR>
nmap <C-_> gcc
vmap <C-_> gc<CR>gv
nmap <C-j> =G
nnoremap f :F<CR>

"NERDTree"
"let g:NERDTreeMapOpenInTab = <rightmouse>
let g:nerdtree_tabs_focus_on_files=1

"Echodoc"
let g:echodoc#enable_at_startup = 1

"Markdown stuff"
let g:vim_markdown_folding_disabled = 1
let g:mkdp_browser = 'xdg-open'
let g:mkdp_preview_options = {
	\ 'katex': {},
	\ }
let g:mkdp_page_title = '${name}'

"START shit I stole from Sacul"

"Remove background"
hi LineNr       guibg=NONE ctermbg=NONE
hi SignColumn   guibg=NONE ctermbg=NONE
hi VertSplit    guibg=NONE ctermbg=NONE gui=NONE      cterm=NONE ctermfg=240
hi CursorLineNr guibg=NONE ctermbg=NONE guifg=#585858 ctermfg=7
hi StatusLine   guibg=NONE ctermbg=NONE gui=NONE      cterm=NONE
hi StatusLineNC guibg=NONE ctermbg=NONE gui=NONE      cterm=NONE

"Set wildmenu colors"
hi WildMenu ctermbg=12
hi WildMenu ctermfg=21

"Nicer vertical separators"
"set fillchars+=vert:┃
set fillchars=vert:\▏

"Indentation guide"
"hi indentGuide ctermfg=248
"match indentGuide /\t/
"set list lcs=tab:\▏\ 
"set list


"END shit I stole from Sacul"

"Cooler git diffs"
let g:gitgutter_sign_added='▓'
let g:gitgutter_sign_modified='░'
let g:gitgutter_sign_removed='_'
let g:gitgutter_sign_removed_first_line='_'
let g:gitgutter_sign_modified_removed='_'
let g:gitgutter_override_sign_column_highlight = 0

hi! GitGutterAdd          guibg=NONE ctermbg=NONE guifg=#6c6c6c ctermfg=242
hi! GitGutterChange       guibg=NONE ctermbg=NONE guifg=#6c6c6c ctermfg=242
hi! GitGutterDelete       guibg=NONE ctermbg=NONE guifg=#6c6c6c ctermfg=242
hi! GitGutterChangeDelete guibg=NONE ctermbg=NONE guifg=#6c6c6c ctermfg=242

"Cooler git conflicts"
let g:conflict_marker_highlight_group = ''
let g:conflict_marker_begin = '^<<<<<<< .*$'
let g:conflict_marker_end   = '^>>>>>>> .*$'

highlight ConflictMarkerBegin guibg=#2f7366
highlight ConflictMarkerOurs guibg=#2e5049
highlight ConflictMarkerTheirs guibg=#344f69
highlight ConflictMarkerEnd guibg=#2f628e

"Line number color to match Limelight"
highlight LineNr guifg=#6c6c6c ctermfg=242

"New file in buffer directory"
command -nargs=1 New :e %:p:h/<args>

"Goyo and stuff config"
"let g:goyo_height="95%"
"let g:limelight_conceal_ctermfg = 248
"let g:limelight_paragraph_span = 0

"Dynamic formats"
"if &filetype ==# "vim" 
"let g:limelight_bop = '^\s'
"let g:limelight_eop = '\ze\n^\s'
"elseif <another condition> 
"else
"let g:limelight_bop = '\(\(?<=\n\n\)^\/\/ \p*\n\|^\w.*\(:\|{\|(\|)\)\n\|\(?<=\n\n\)\p\)'
"let g:limelight_eop = '\(\n\n\/\/\|^\p\n\n\|.\n\n\S\)'
"endif

"Autorun Goyo"
"autocmd VimEnter * :LiteDFMToggle<CR>i<Esc>`^

"autocmd VimEnter * Limelight
set numberwidth=10
set textwidth=80
set number

"TITTY FAST"
set ttyfast
set lazyredraw

"Undo history"
set undofile

"Make nvim show changes done by commands in real-time"
set inccommand=nosplit

"ALE configs"
highlight ALEWarningSign ctermbg=NONE
let g:ale_virtualtext_cursor = 1
let g:ale_sign_error = '!'
let g:ale_sign_warning = '>'
let g:ale_sign_column_always = 1
let g:ale_completion_enabled = 1
let g:ale_fix_on_save = 1
let g:ale_fixers = {
			\ 'go':  [ "goimports"    ],
			\ 'cpp': [ "clang-format" ],
			\ 'javascript': [ "prettier" ],
			\ }
let g:ale_linters = {
			\ 'go':  [ "gopls"  ],
			\ 'c':   [ "clangd" ],
			\ 'cpp': [ "clangd" ],
			\ 'javascript': [ "eslint", "tsserver" ],
			\ }
nnoremap gd :ALEGoToDefinition<CR>
nnoremap K :ALEHover<CR>

"Fix ALE from aggressively completing ahead"
set completeopt+=noselect

"Assistive LSP bindings"
function! ToggleQf()
	for buffer in tabpagebuflist()
		if bufname(buffer) == ''
			cclose
			return
		endif
	endfor
	botright copen
	wincmd p
endfunction

"Next error"
nnoremap <M-n> :cnext<CR>zz
"Show errors"
nnoremap <silent><M-c> :call ToggleQf()<CR>
"Previous error"
nnoremap <M-p> :cprev<CR>zz

"Deoplete+ALE integration"
" let g:deoplete#enable_at_startup = 1
" call deoplete#custom#option('sources', {
" 	\ '_': [ 'ale', 'neco-syntax', 'deoplete-emoji' ],
" 	\})

"vim-lsp configuration"
"Golang stuff"
"autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
"au User lsp_setup call lsp#register_server({
			"\ 'name': 'gopls',
			"\ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
			"\ 'whitelist': ['go'],
			"\ })
"autocmd BufWritePre *.go LspDocumentFormatSync

"let g:LanguageClient_serverCommands = {
"	\ 'go': [ 'bingo', '-freeosmemory', '5' , '-maxparallelism', '4', '-cache-style', 'on-demand' ]
"	\ }
