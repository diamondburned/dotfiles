set nocompatible

call plug#begin('~/.vim/bundle')

Plug 'gioele/vim-autoswap'
Plug 'inkarkat/vim-SyntaxRange'
Plug 'kyazdani42/nvim-tree.lua'
Plug 'antoinemadec/FixCursorHold.nvim'
Plug 'tpope/vim-commentary'
Plug 'airblade/vim-gitgutter'
Plug 'plasticboy/vim-markdown'
Plug 'godlygeek/tabular'
Plug 'bogado/file-line'
Plug 'rhysd/conflict-marker.vim'

"Better highlighting"
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-refactor'

"Autocomplete brackets/parens/etc like vscode"
Plug 'jiangmiao/auto-pairs'

"Autocompletion"
Plug 'dense-analysis/ale'
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/completion-nvim'

"Languages"
Plug 'cespare/vim-toml'
Plug 'LnL7/vim-nix'
Plug 'evanleck/vim-svelte'

call plug#end()

"Better mouse support"
set mouse=a
vmap <C-c> "+y
vmap <C-v> "+p
imap <C-v> "+p
map - dd

"Make comments italiced
hi Comment cterm=italic

"Auto-commands for type-specific files"
autocmd BufRead,BufNewFile *.nix    setlocal noautoindent
autocmd BufRead,BufNewFile *.nix    setlocal noexpandtab
autocmd BufRead,BufNewFile *.nix    setlocal shiftwidth=4
autocmd BufRead,BufNewFile *.md     setlocal spell
autocmd BufRead,BufNewFile *.vue    syntax sync fromstart
autocmd BufRead,BufNewFile *.vugu   setlocal filetype=html
autocmd BufRead,BufNewFile *.svelte setlocal filetype=html
autocmd BufRead,BufNewFile *.svelte setlocal syntax=html
autocmd BufRead,BufNewFile .env*    setlocal syntax=sh

"Go to last cursor on file open"
autocmd BufReadPost *
	\ if line("'\"") >= 1 && line("'\"") <= line("$") |
	\   exe "normal! g`\"" |
	\ endif

"Autoindent"
set smartindent
filetype indent on

"Thick gutter"
set numberwidth=8
set textwidth=80
set number

"Special cases for special formats"
autocmd BufRead,BufNewFile *.html setlocal textwidth=100

"Tab size 4"
set tabstop=4
set shiftwidth=4

"Better colors and highlighting"
let g:material_terminal_italics = 1
let g:material_theme_style='lighter'
set background=light
"Transparent background"
hi Normal guibg=NONE ctermbg=NONE

"Tweaks"
filetype plugin indent on
syntax on

"Tree-sitter config"
lua <<EOF
require'nvim-treesitter.configs'.setup {
	indent    = { enable = false },
	highlight = { enable = true  },
	refactor  = {
		highlight_definitions = { enable = true },
	},
}
EOF

"Custom colors"
hi TabLine     cterm=NONE ctermfg=15 ctermbg=NONE
hi TabLineSel  ctermbg=15 ctermfg=0
hi TabLineFill cterm=NONE

hi Todo     ctermbg=14
hi Search   ctermbg=14   ctermfg=0
hi SpellBad ctermbg=NONE cterm=undercurl guisp=#FF6961

hi StatusLine   ctermfg=5
hi StatusLineNC ctermfg=13

hi Special ctermfg=15
hi SpecialChar ctermfg=5
hi Comment ctermfg=4
hi Constant ctermfg=15
hi String  ctermfg=13
hi Number  ctermfg=13
hi Boolean ctermfg=13
hi Identifier ctermfg=15
hi Function ctermfg=14
hi Statement ctermfg=6
hi Operator ctermfg=12

hi Type ctermfg=2

hi SignColumn   ctermbg=NONE
hi EndOfBuffer  ctermfg=7
hi QuickFixLine cterm=reverse

"Change NERDTree's colors"
hi Directory     ctermfg=14
hi NERDTreeFlags ctermfg=6

"NERDTree executable highlight but also something else"
hi Title ctermfg=10

"Custom negative number highlighting"
syntax match negativeNumber '[-+]\d\+\(\.\d*\)\?'
hi def link  negativeNumber NUmber

""Hide the trailing slash next to the directories"
"augroup nerdtreehidecwd
"	autocmd!
"	autocmd FileType nerdtree setlocal conceallevel=3 | syntax match NERDTreeDirSlash #/$# containedin=NERDTreeDir conceal contained
"augroup end

""Hide the cursor for NERDTree; rely on the background"
"autocmd FileType nerdtree hi Cursor 

"Custom cursor mode: normal-visual block, insert-command IBeam"
set guicursor=n-v-sm:block
set guicursor+=i-c-ci-ve:ver25
set guicursor+=r-cr-o:hor20

"Change completion colors"
hi Pmenu    ctermbg=2 ctermfg=0
hi PmenuSel ctermfg=15

"Extra Go colors"
"hi goParamName       ctermfg=15
"hi goReceiverType    ctermfg=15
"hi goTypeConstructor ctermfg=15
"hi goTypeName        ctermfg=15
"hi goFunctionCall    ctermfg=15

"Resume past cursor location on open"
au InsertLeave * call cursor([getpos('.')[1], getpos('.')[2]+1])

"Autoindentation"
set autoindent

"Give ALE errors red undercurls"
hi ALEError cterm=undercurl gui=undercurl guisp=#FF6961

"Hide NERDTree arrows"
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

"ToggleWrap from the vim wiki"
set linebreak
nnoremap <Up>   gk
nnoremap <Down> gj
nnoremap <Home> g<Home>
nnoremap <End>  g<End>

"Backups"
"Turn on backup option
set backup
set backupdir=~/.vim/backup/
set writebackup
set backupcopy=no
au BufWritePre * let &bex = '@' . strftime("%F.%H:%M")

"Better highlighting, less broken"
autocmd BufEnter * :syntax sync fromstart
syntax sync minlines=100

"Custom keybinds"
map <Tab> :NvimTreeToggle<CR> <bar> :NvimTreeRefresh<CR>
nmap <C-_> gcc
vmap <C-_> gc<CR>gv
nmap <C-j> =G
nnoremap f :F<CR>

"Better Vim regexes"
set smartcase
nnoremap / /\v
vnoremap / /\v
cnoremap %s/ %smagic/
cnoremap \>s/ \>smagic/
nnoremap :g/ :g/\v
nnoremap :g// :g//

"Nvim Tree configs"
let g:nvim_tree_hijack_netrw = 1
let g:nvim_tree_ignore = [ '.git', 'node_modules' ]
let g:nvim_tree_tab_open = 1
let g:nvim_tree_auto_open = 1
let g:nvim_tree_auto_close = 1
let g:nvim_tree_add_trailing = 1
let g:nvim_tree_git_hl = 1
let g:nvim_tree_follow = 1
let g:nvim_tree_hide_dotfiles = 0
let g:nvim_tree_gitignore = 0
let g:nvim_tree_show_icons = {
	\	'git': 1,
	\	'folders': 1,
	\	'files': 1,
	\ }
let g:nvim_tree_icons = {
	\	'default': "  ",
	\	'symlink': "  ",
	\	'git': {
	\		'unstaged': "M",
	\		'staged': "M",
	\		'unmerged': "U",
	\		'renamed': "R",
	\		'untracked': "U",
	\		'deleted': "D",
	\		'ignored': "I",
	\	},
	\	'folder': {
	\		'default': ">",
	\		'open': "v",
	\		'empty': ">",
	\		'empty_open': "v",
	\		'symlink': ">",
	\		'symlink_open': "v",
	\	},
	\	'lsp': {
	\		'hint': ">",
	\		'info': "!",
	\		'warning': "!",
	\		'error': "!",
	\	}
	\ }

"Return the Tab bind"
lua << EOF
	vim.g.nvim_tree_bindings = {
		["<Tab>"] = nil,
	}
EOF

hi NvimTreeCursorLine ctermbg=7
hi NvimTreeFolderName ctermfg=NONE
hi NvimTreeFolderIcon ctermfg=14
hi NvimTreeExecFile   ctermfg=12
hi NvimTreeGitDirty   ctermfg=9
hi NvimTreeGitStaged  ctermfg=2
hi NvimTreeGitRenamed ctermfg=6
hi NvimTreeGitDeleted ctermfg=1
hi NvimTreeGitIgnored ctermfg=8

"Markdown stuff"
let g:vim_markdown_folding_disabled = 1
let g:mkdp_browser = 'xdg-open'
let g:mkdp_preview_options = {
	\ 'katex': {},
	\ }
let g:mkdp_page_title = '${name}'

"Remove background"
hi LineNr       guibg=NONE ctermbg=NONE
hi SignColumn   guibg=NONE ctermbg=NONE
hi VertSplit    guibg=NONE ctermbg=NONE gui=NONE cterm=NONE ctermfg=240
hi StatusLine   guibg=NONE ctermbg=NONE gui=NONE cterm=NONE
hi StatusLineNC guibg=NONE ctermbg=NONE gui=NONE cterm=NONE

"Set wildmenu colors"
hi WildMenu ctermbg=12
hi WildMenu ctermfg=21

"Current Line highlighting"
" hi CursorLine    ctermbg=7 cterm=NONE
set cursorline
hi clear CursorLine
hi CursorLineNR ctermfg=14

"Nicer vertical separators"
set fillchars=vert:\▏

"Cooler git diffs"
" let g:gitgutter_sign_added='▓'
" let g:gitgutter_sign_modified='░'
" let g:gitgutter_sign_removed_first_line='_'
" let g:gitgutter_sign_modified_removed='_'
let g:gitgutter_sign_added='+'
let g:gitgutter_sign_modified='¦'
let g:gitgutter_sign_removed='-'
let g:gitgutter_sign_removed_first_line='-'
let g:gitgutter_sign_modified_removed='-'
let g:gitgutter_override_sign_column_highlight = 0

hi! GitGutterAdd          guibg=NONE ctermbg=NONE guifg=#6c6c6c ctermfg=2
hi! GitGutterChange       guibg=NONE ctermbg=NONE guifg=#6c6c6c ctermfg=6
hi! GitGutterDelete       guibg=NONE ctermbg=NONE guifg=#6c6c6c ctermfg=1
hi! GitGutterChangeDelete guibg=NONE ctermbg=NONE guifg=#6c6c6c ctermfg=1

"Cooler git conflicts"
let g:conflict_marker_highlight_group = ''
let g:conflict_marker_begin = '^<<<<<<< .*$'
let g:conflict_marker_end   = '^>>>>>>> .*$'

highlight ConflictMarkerBegin  ctermbg=28
highlight ConflictMarkerOurs   ctermbg=22
highlight ConflictMarkerTheirs ctermbg=23
highlight ConflictMarkerEnd    ctermbg=30

"Line number color to match Limelight"
highlight LineNr guifg=#6c6c6c ctermfg=242

"New file in buffer directory"
command -nargs=1 New :e %:p:h/<args>

"Optimized drawing"
set ttyfast
set lazyredraw

"Configuring the update delay after buffer updates"
set updatetime=150
let g:cursorhold_updatetime = 150

"Undo history"
set undofile

"Make nvim show changes done by commands in real-time"
"Actually very buggy"
set inccommand=nosplit

"Better scrolloff"
set scrolloff=7
"Better sidescroll"
set sidescroll=1
set sidescrolloff=5

"Auto-reload changed files"
set autoread
au CursorHold * checktime

"Autocompletion"
"Fix aggressive preemptive completion with noselect"
set completeopt=menuone,noselect

lua<<EOF
	local on_attach = function(client, bufnr)
		require('completion').on_attach(client, bufnr)

		local opts = { noremap = true, silent = true }
		local keym = function(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
		keym('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
		keym('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
		keym('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
	end

	local servers = { "gopls", "tsserver", "clangd", "zls", "denols" }
	local nvim_lsp = require('lspconfig')

	for _, server in ipairs(servers) do
		nvim_lsp[server].setup { on_attach = on_attach }
	end
EOF

"ALE configs"
highlight ALEWarningSign ctermbg=NONE
let g:ale_virtualtext_cursor = 1
let g:ale_sign_error = '!'
let g:ale_sign_warning = '>'
let g:ale_sign_column_always = 1
let g:ale_fix_on_save = 1
let g:ale_linters_explicit = 1

let g:ale_completion_enabled = 0
let g:ale_completion_autoimport = 0

let g:ale_linter_aliases = {
			\ 'svelte': ['css', 'javascript'],
			\ }
let g:ale_fixers = {
			\ 'go':         [ "goimports" ],
			\ 'css':        [ "prettier" ],
			\ 'cpp':        [ "uncrustify", "clang-format" ],
			\ 'json':       [ "jq" ],
			\ 'svelte':     [ "prettier", "prettier_standard", "eslint" ],
			\ 'javascript': [ "prettier", "prettier_standard", "eslint" ],
			\ }

""Assistive LSP bindings"
"function! ToggleQf()
"	for buffer in tabpagebuflist()
"		if bufname(buffer) == ''
"			cclose
"			return
"		endif
"	endfor
"	botright copen
"	wincmd p
"endfunction

""Next error"
"nnoremap <M-n> :cnext<CR>zz
""Show errors"
"nnoremap <silent><M-c> :call ToggleQf()<CR>
""Previous error"
"nnoremap <M-p> :cprev<CR>zz
