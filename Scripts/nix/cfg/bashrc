#!/usr/bin/env bash

# ~/.bashrc
. ~/.bash_aliases

# Commands that should be applied only for interactive shells.
[[ $- != *i* ]] && exit

HISTFILESIZE=1000000
HISTSIZE=10000

shopt -s histappend
shopt -s checkwinsize
shopt -s extglob
shopt -s globstar
shopt -s checkjobs

xset r rate 200 50 &> /dev/null
gsettings set org.gnome.desktop.peripherals.keyboard repeat-interval 25
gsettings set org.gnome.desktop.peripherals.keyboard delay 200

export INPUTRC="${HOME}/.inputrc"
# shopt -s direxpand
export SSH_ASKPASS=""

# l is aliased somewhere...
# unalias l &> /dev/null
# l() {
# 	[[ -f $1 ]] && cat "$@" || ls "$@"
# }

# Tab width 4.
tabs 4

f() {
	(( $# == 0 )) && return 1
	"$@" &>> /tmp/forked-"$1".log || return &
	disown
}

fork() {
	f "$@"
}

complete -F _command f
complete -F _command fork

# export GTKCORD_CUSTOM_CSS="
# .membercontainer {
# 	background-image: url(\"/home/diamond/Downloads/Snow is - 夏少女 (70546791) 1ページ.png\");
# 	background-position: 50% 35%;
# 	background-size: cover;
# }

# .members {
# 	background-color: alpha(#000000, 0.62);
# }
# "

# :)
# . "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh"

#alias ls='ls --color=auto'
#PS1='^\w '
# >>> BEGIN ADDED BY CNCHI INSTALLER
BROWSER=/usr/bin/google-chrome-unstable
EDITOR=nvim
# <<< END ADDED BY CNCHI INSTALLER

#powerline-daemon -q
#POWERLINE_BASH_CONTINUATION=1
#POWERLINE_BASH_SELECT=1
#. /usr/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh
#PS1='\033[01;34m> \w \033[0m'
#PS1='\033[01;34m> \w \033[0m'

#xinput set-button-map "MICROSOFT SAM Pen (0)" 1 3 2 &> /dev/null 

# Auto-start wf-panel and nautilus


HISTFILESIZE=2147483647 # fuck
HISTSIZE=100000
shopt -s histappend

# always show line number
function grep() {
	if [[ -t 1 ]]; then
		command grep --color -n "$@"
	else
		command grep "$@"
	fi
}

function grepr() {
	# -n show line number
	# -R grep recursively
	grep "$@" -R '.'
}

#PID=`pgrep -n -u $USER gnome-session`
#if [ -n "$PID" ]; then
#    export DISPLAY=`awk 'BEGIN{FS="="; RS="\0"}  $1=="DISPLAY" {print $2; exit}' /proc/$PID/environ`
#fi
#unset PID

# traverse traverses the parent directory to find the given file.
__traverse() {
	local basename="$1" path pieces

	IFS="/" read -ra pieces <<< "${PWD:1}"

	for ((i = ${#pieces[@]}; i >= 0; i--)); {
		printf -v path "%s/" "" "${pieces[@]:0:$i}"
		path+="$basename"

		[[ -e "$path" ]] && {
			echo -n "$path"
			return
		}
	}

	return 1
}

# git_ps1 returns the name of the current branch, or empty string and sig 1 if
# none.
__git_ps1() {
	local IFS=' '
	local path head

	path="$(__traverse .git)" || return 1

	read -r prefix head < "$path/HEAD"

	[[ "$head" == "" ]]        \
		&& echo -n "${prefix}" \
		|| echo -n "${head/refs\/heads\//}"
}

## NIX SHIT

export NIX_AUTO_RUN=1
nixsh() {
	local path

	(( $# > 0 )) && {
		[[ -f $1 ]] && nix-shell --run bash "$1" \
			        || nix-shell --run bash '<nixpkgs>' -p "$@"
		return
	}

	path="$(__traverse shell.nix)" && {
		nix-shell --run bash "$path"
		return
	}

	nix-shell --run bash -p
}

alias nixshu='nix-shell --run bash -I nixpkgs=$(nix-instantiate --eval -E "<unstable>") -p'

nix_exec() {
	nix-build "${@:2}" -E "with import <nixpkgs> {}; (callPackage ./$1 {}).all"
}

alias nixshbuild="nix-shell '<nixpkgs>' -A"
alias nixbuild="nix-build '<nixpkgs>' -A package"
# alias nixrl="sudo nixos-rebuild switch --max-jobs 0"
# alias nixrl="(cd $HOME/Scripts/nix && sudo nix-shell --run 'nixos-rebuild switch')"
alias nixgc="sudo nix-collect-garbage -d"

nixrl() (
	cd "$HOME/Scripts/nix"
	sudo nix-shell --run 'nixos-rebuild --log-format internal-json -v switch |& nom --json'
)

# lol fuck node
# NPM_PACKAGES="${HOME}/.npm-packages"
# PATH="$NPM_PACKAGES/bin:$PATH"
# MANPATH="$NPM_PACKAGES/share/man:$(manpath)"

#npm() {
#	if compgen -G "/nix/store/*-nodejs-11.*/" > /dev/null; then
#		node="$_"
#		PATH="$node/bin:$PATH" $node/bin/npm "$@"
#	else
#	    nix-shell '<nixpkgs>' -p nodejs-11_x --run "npm $@"
#	fi
#}

## END

alias copy="xclip -selection clipboard"

ytplay() {
	ytdl --filter=res:720p -s -o - "$1" | mpv -
}

ytaudio() {
	ytdl --filter=itag:250 -s -o - "$1" | mpv -
}

ytmpv() {
	mpv --ytdl-format="ytdl-format=bestvideo[height<=?1440]+bestaudio/best" "${@}"
}

toclipboard() {
	local d=$(printf "%(%s)T")
	xclip -o -selection clipboard > /tmp/${d}.png
	echo "/tmp/${d}.png"
}

alias gbs="CGO_ENABLED=0 go build -ldflags '-s'"

alias cb="cargo build"
alias cr="cargo run"

function gr() {
	# [[ -f ./pkged.go ]] && pkger
	go run . "$@"
}

function goplsno() {
	gopls=$(command -v gopls) &> /dev/null \
		&& mv "$gopls" "$gopls.bak" \
		|| mv "$GOBIN/gopls.bak" "$GOBIN/gopls"
}

function wp() {
	case $1 in
		w)	webpack src/index.js --output bin/app.js -d --watch
			;;
		c)	webpack src/index.js --output bin/app.js -d
			;;
		*)	echo "w/c"
			;;
	esac
}

function w3m() {
	clear

	sleep 0.5

	printf "\e[?25h"

	printf '0;1;%s;%s;%s;%s;;;;;%s\n3;\n4\n' \
		"${4:-0}" \
		"${5:-0}" \
		"$1" \
		"$2" \
		"$3" | /usr/lib/w3m/w3mimgdisplay

	read -ern 1

    printf '6;%s;%s;%s;%s\n3;' \
        "${4:-0}" \
        "${5:-0}" \
        "$1" \
        "$2" | /usr/lib/w3m/w3mimgdisplay

	printf "\e[?25l"
}

# Dumb SQL stuff
MYSQL_TEST_USER="root"
MYSQL_TEST_ADDR="127.0.0.1"

#alias hex2dec=$"printf '%d' \"0x$1\""
function hex2dec() { printf '%d' "0x$1"; }

export GOTOOLCHAIN=local
export GOPROXY=direct
export GOPATH=$HOME/.go
export GOBIN=$GOPATH/bin
export PATH="$GOBIN:$PATH"
export GO111MODULE=on

export PATH="$HOME/.bin:${PATH//::/:}"

alias ga="git add -A"
alias gp="git push origin"

gm() {
	[[ $1 ]] && {
		printf -v _msg "%s\n\n" "$@"
		git commit -m "$_msg"
	} || {
		git commit
	}

}

ghpr() {
	local pr="$1"
	if [[ ! "$pr" ]]; then
		echo "Usage: ghpr <pr#>" >&2
		return 1
	fi

	git fetch origin pull/"$pr"/head:pr/"$pr"
	git checkout pr/"$pr"
}

alias gagm="git add -A && gm"

alias gamend="git commit --amend"

last-commit() (
	cd "$1" || return 1
	git log --pretty=oneline | cut -f1 -d' ' | head -n1
)

copy-last-commit() {
	last_commit=$(last-commit "$1") || return 1
	echo -n "$last_commit" | wl-copy
	echo "Copied $last_commit to clipboard."
}

# Get go completion if missing.
command -v gotab &> /dev/null || {
	(
		set -e
		# Download asynchronously
		# echo "Installing gotab."
		go get github.com/dsnet/gotab -o $GOBIN/gotab 2> /dev/null
		# echo "Installed gotab."
	) &
}
# Register
complete -C gotab -o nospace go

loop() {
done=0
trap done=1 SIGINT
while true; do
	[[ $done = 1 ]] && break
	eval "$@"
done
}

# checkcalc() {
# 	trap \
# 		'thisisgettingworse="$even_previous"; \
# 		even_previous="$previous_command"; \
# 		previous_command=$this_command; \
# 		this_command=$BASH_COMMAND' \
# 		DEBUG

# 	if [[ $even_previous =~ ^[0-9] ]]; then
# 		bc -l <<< $thisisgettingworse
# 	fi
# }

xterm() {
	FONT="Source Code Pro Medium"
	
	# _font=$(gsettings get org.gnome.desktop.interface monospace-font-name) && {
	#	[[ $_font =~ \'(.*)\ [0-9]+\' ]] && FONT=${BASH_REMATCH[1]}
	# }
	
	nixsh --run "xterm -ti vt340 -fa '$FONT' -fs 9 -bg '#1D1D1D' -ms '#FFFFFF' -fg '#EAEAEA' -b 5" xterm
}

#PROMPT_COMMAND=$'checkcalc'


#PS1='\n\[\033[00;36m\]${HOSTNAME} \[\033[01;32m\]\w/\[\033[00;32m\]$(__git_ps1) \[\033[0m\]'
# PS1="\n\\$ \[\033[m\]\[\033[38;5;32m\]\h\[\033[m\]\[\033[38;5;15m\] @ \[\033[m\]\[\033[38;5;2m\]\w\[\033[m\]\[\033[38;5;15m\] :\[\033[m\]\[\033[38;5;22m\]\$(__git_ps1)\n \[\033[m\]\[\033[38;5;241m\] >\[\033[m\] "


set-title() {
	local title="$1"
	if [[ ! $title ]]; then
		title="$(basename "$PWD")"
	fi
	__lineprompt_custom_title="$title"
	__lineprompt_set_title
}

__lineprompt_set_title() {
	local p
	p="${__lineprompt_custom_title:-$1}"
	# Sanitize the title by stripping control characters.
	p="${p//[^[:print:]]/}"
	p="${p//\\/\\\\}"
	echo -ne "\033]0;$p\007"
	# echo -ne "\033]0;${1//[^[:print:]]/}\007"
}

__lineprompt_middleware() {
	__lineprompt_set_title "$THIS_COMMAND : ../$(basename "$PWD")/"
}

__lineprompt_debug_handler() {
	# Create a 2-level-deep command history using variables.
	PREVIOUS_COMMAND="$THIS_COMMAND"
	THIS_COMMAND="$1"
	# Run the middleware.
	__lineprompt_middleware
}

__lineprompt_init() {
	_color_cyan="\033[38;2;85;205;252m"
	_color_pink="\033[38;2;247;157;208m"

	# _arrow="\[\033[9m\]\[$_color_cyan\] ❤ \[\033[0m\]\[$_color_pink\]▶\[\033[m\] "
	_arrow="\[$_color_cyan\]―❤―\[\033[0m\]\[$_color_pink\]▶\[\033[m\] "
	trap '__lineprompt_debug_handler "$BASH_COMMAND"' DEBUG

	# Disabled because glitchy.
	# Redraw on resize.
	# trap 'echo -e "\033[2J\033[H"; __lineprompt_redraw; echo -en "${PS1@P}"' WINCH
}

__lineprompt_redraw() {
	# git branch
	local git_branch
	git_branch=" : ($(__git_ps1))" || git_branch=

	# Count number of jobs.
	local j=( $(jobs -p) )
	(( ${#j[@]} > 0 )) && JOBS=" (${#j[@]} jobs)" || JOBS=

	# Calculate direnv status.
	[[ "$DIRENV_DIR" ]] && direnv_status="+ direnv" || direnv_status=

	# rainbow prompt
	__lineprompt_cmps COLUMNS PWD SHLVL JOBS git_branch direnv_status || {
		__shlvl="$[ (SHLVL + 1) / 2 ]" # account for nix-shell --run bash
		_prompt="$(lineprompt "$ $HOSTNAME ~ ${__shlvl}$JOBS @ ${PWD}$git_branch $direnv_status")"
	}

	# set PS1
	printf -v PS1 "\n%s\n%s" "$_prompt" "$_arrow"
}

__lineprompt_main() {
	# local commands
	local sig=$?
	local cmd="$PREVIOUS_COMMAND"

	# add to history right away
	history -n
	history -a

	# exit status 0
	(( sig > 0 )) && echo "exit status $sig"

	# Redraw the prompt
	__lineprompt_redraw

	# Quick cd
	# [[ -d "$1" ]] && cd "$1"

	# terminal title
	[[ "$cmd" == "__lineprompt_main" ]] && __lineprompt_set_title "$PWD" || {
		[[ "$sig" == 0 ]]                                                  \
			&& __lineprompt_set_title "Exited $cmd : ../$(basename "$PWD")/" \
			|| __lineprompt_set_title "Failed with status $sig : $PWD" 
	}
}

# Bash multiple compare. $@ var name, returns 1 if var is changed
# fn COLUMNS PWD ... -> [0|1]
__lineprompt_cmps() {
	local sig=0

	for var in "$@"; {
		local oldvar="__old_$var"

		# If this variable is unchanged.
		[[ "${!var}" == "${!oldvar}" ]] && {
			continue
		}
	
		# Update the variable if they're changed.
		printf -v "$oldvar" "%s" "${!var}"

		# Set the return signal to 1.
		sig=1
	}

	return $sig
}

# Redraw the prompt on resize.
# trap '__lineprompt_main' WINCH

__lineprompt_init
PROMPT_COMMAND=__lineprompt_main

# Ignore sensitive information
HISTIGNORE='export *TOKEN*'

extract() {
	for var in "$@"; do
		if [ -f "$var" ]; then
			case $var in
				*.tar.bz2|*.tar.gz|*.tar.xz|*.tar|*.tgz|*.xz) tar xvf "$var";;
				*.gz)      gunzip  "$var";;
				*.7z)      7za x   "$var";;
				*.zip)     unzip   "$var";;
				*) echo "'$var' cannot be extracted via extract"
			esac
		else
			echo 'usage : extract [file]'
		fi
	done
}

urlencode() {
	# https://gist.github.com/cdown/1163649
	old_lc_collate=$LC_COLLATE
	LC_COLLATE=C
	local length="${#1}"
	for (( i = 0; i < length; i++ )); do
		local c="${1:i:1}"
		case $c in
			[a-zA-Z0-9.~_-]) printf "$c" ;;
			*) printf '%%%02X' "'$c" ;;
		esac
	done
	LC_COLLATE=$old_lc_collate
}

updot() (
	cd $HOME
	git add -A
	git commit m $*
	git push origin
)

weaponized_shitposting() {
	for i in `echo -n "$@" | sed 's/ /_/g' | tr '[A-Z]' '[a-z]' | fold -w 1` ; do
		if [ "$i" = "_" ] ; then
			echo -n '\:clap:'
		else
			echo -n "\\:regional_indicator_$i: "
		fi
	done
}

function tscdom() {
	tsc --lib "es2015","es2015.core","dom","dom.iterable","es6","scripthost" --removeComments --outFile "$2" "$1"
	#tsc --target es2015 --removeComments --outFile "$2" "$1"
}

autism() {
	var=$*

	for ((i = 0; i < ${#var}; i++)); {
		out=${var:i:1}
		((RANDOM & 1)) && out=${out^}
		echo -n "$out"
	}

	echo
}

dockstro() {
	sudo docker run --rm -it "$1" "/bin/sh"
}

# end

alias muslgo="CC=/usr/bin/musl-gcc /usr/bin/go build --ldflags '-linkmode external -extldflags \"-static\"'"
alias staticgo="CGO_ENABLED=0 GOOS=linux go build -ldflags '-w'"

repeat() {
	[ "$#" -le 1 ] && exit 1
	i="$1"
	shift 1
	for i in {1..$i}; do "$@"; done
}

_shell_calc() {
	command -v bc &> /dev/null || return

	_sc_trap() {
		even_previous=$previous_command
		previous_command=$this_command
		this_command=$BASH_COMMAND
	}

	trap _sc_trap DEBUG
	bc -l <<< "$even_previous" 2> /dev/null
}

# Because I'm careless.
# rm() {
# 	command -v rmtrash &> /dev/null || {
# 		echo 'rmtrash not found. Try using `command rm`.'
# 		return
# 	}
# 	command rmtrash --forbid-root=ask-forbid "$@"
# }

# refx restarts PulseEffects.
refx() {
	pkill easyeffects &> /dev/null
	easyeffects --gapplication-service &> /dev/null & disown
	echo "Restarted EasyEffects."
}

# Direnv.
# export DIRENV_LOG_FORMAT= # quiet mode

alias vim="nvim"
alias gdbrun="gdb -ex run"

alias dc=cd

cd() {
	if [[ "$1" == "-" ]]; then
		popd &> /dev/null
		return
	fi
	pushd "$@" &> /dev/null
}

echo Welcome
