--- a/dlls/winepulse.drv/mmdevdrv.c
+++ b/dlls/winepulse.drv/mmdevdrv.c
@@ -490,6 +490,10 @@ static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, W
     pa_buffer_attr attr;
     int ret;
     unsigned int length = 0;
+    const char *latency_usec_env = getenv("STAGING_PA_LATENCY_USEC");
+    size_t latency_usec = latency_usec_env ? atoi(latency_usec_env) : 1000;
+
+    TRACE("latency set to %lu\n", (unsigned long)latency_usec);
 
     pa_channel_map_init_auto(&map, 2, PA_CHANNEL_MAP_ALSA);
     ss.rate = 48000;
@@ -497,9 +501,9 @@ static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, W
     ss.channels = map.channels;
 
     attr.maxlength = -1;
-    attr.tlength = -1;
-    attr.minreq = attr.fragsize = pa_frame_size(&ss);
-    attr.prebuf = 0;
+    attr.tlength = attr.fragsize = pa_usec_to_bytes(latency_usec, &ss);
+    attr.minreq = -1;
+    attr.prebuf = -1;
 
     stream = pa_stream_new(ctx, "format test stream", &ss, &map);
     if (stream)
@@ -508,9 +512,9 @@ static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, W
         ret = -1;
     else if (render)
         ret = pa_stream_connect_playback(stream, NULL, &attr,
-        PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS, NULL, NULL);
+        PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS|PA_STREAM_ADJUST_LATENCY, NULL, NULL);
     else
-        ret = pa_stream_connect_record(stream, NULL, &attr, PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS);
+        ret = pa_stream_connect_record(stream, NULL, &attr, PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS|PA_STREAM_ADJUST_LATENCY);
     if (ret >= 0) {
         while (pa_mainloop_iterate(ml, 1, &ret) >= 0 &&
                 pa_stream_get_state(stream) == PA_STREAM_CREATING)
@@ -535,12 +539,6 @@ static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, W
     if (length)
         pulse_def_period[!render] = pulse_min_period[!render] = pa_bytes_to_usec(10 * length, &ss);
 
-    if (pulse_min_period[!render] < MinimumPeriod)
-        pulse_min_period[!render] = MinimumPeriod;
-
-    if (pulse_def_period[!render] < DefaultPeriod)
-        pulse_def_period[!render] = DefaultPeriod;
-
     wfx->wFormatTag = WAVE_FORMAT_EXTENSIBLE;
     wfx->cbSize = sizeof(WAVEFORMATEXTENSIBLE) - sizeof(WAVEFORMATEX);
 
@@ -1977,6 +1975,8 @@ static HRESULT WINAPI AudioClient_Initialize(IAudioClient *iface,
     ACImpl *This = impl_from_IAudioClient(iface);
     HRESULT hr = S_OK;
     UINT32 bufsize_bytes;
+    const char *duration_env = getenv("STAGING_PA_DURATION");
+    const char *period_env = getenv("STAGING_PA_PERIOD");
 
     TRACE("(%p)->(%x, %x, %s, %s, %p, %s)\n", This, mode, flags,
           wine_dbgstr_longlong(duration), wine_dbgstr_longlong(period), fmt, debugstr_guid(sessionguid));
@@ -2025,6 +2025,11 @@ static HRESULT WINAPI AudioClient_Initialize(IAudioClient *iface,
     if (duration < 3 * period)
         duration = 3 * period;
 
+    if (duration_env) duration = atoi(duration_env);
+    if (period_env) period = atoi(period_env);
+    TRACE("duration: %lld\n", duration);
+    TRACE("period: %lld\n", period);
+
     This->period_bytes = pa_frame_size(&This->ss) * MulDiv(period, This->ss.rate, 10000000);
 
     This->bufsize_frames = ceil((duration / 10000000.) * fmt->nSamplesPerSec);
