--- a/dlls/winepulse.drv/mmdevdrv.c
+++ b/dlls/winepulse.drv/mmdevdrv.c
@@ -69,9 +69,6 @@ enum DriverPriority {
     Priority_Preferred
 };
 
-static const REFERENCE_TIME MinimumPeriod = 30000;
-static const REFERENCE_TIME DefaultPeriod = 100000;
-
 static pa_context *pulse_ctx;
 static pa_mainloop *pulse_ml;
 
@@ -395,6 +392,9 @@ static DWORD pulse_channel_map_to_channel_mask(const pa_channel_map *map) {
 }
 
 static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, WAVEFORMATEXTENSIBLE *fmt) {
+    REFERENCE_TIME MinimumPeriod = 30000;
+    REFERENCE_TIME DefaultPeriod = 100000;
+
     WAVEFORMATEX *wfx = &fmt->Format;
     pa_stream *stream;
     pa_channel_map map;
@@ -402,6 +402,7 @@ static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, W
     pa_buffer_attr attr;
     int ret;
     unsigned int length = 0;
+    const char *env = getenv("STAGING_PA_PERIOD_SIZE");
 
     pa_channel_map_init_auto(&map, 2, PA_CHANNEL_MAP_ALSA);
     ss.rate = 48000;
@@ -409,9 +410,9 @@ static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, W
     ss.channels = map.channels;
 
     attr.maxlength = -1;
-    attr.tlength = -1;
-    attr.minreq = attr.fragsize = pa_frame_size(&ss);
-    attr.prebuf = 0;
+    attr.tlength = attr.fragsize = pa_usec_to_bytes(1000, &ss);
+    attr.minreq = -1;
+    attr.prebuf = -1;
 
     stream = pa_stream_new(ctx, "format test stream", &ss, &map);
     if (stream)
@@ -420,9 +421,9 @@ static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, W
         ret = -1;
     else if (render)
         ret = pa_stream_connect_playback(stream, NULL, &attr,
-        PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS, NULL, NULL);
+        PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS|PA_STREAM_ADJUST_LATENCY, NULL, NULL);
     else
-        ret = pa_stream_connect_record(stream, NULL, &attr, PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS);
+        ret = pa_stream_connect_record(stream, NULL, &attr, PA_STREAM_START_CORKED|PA_STREAM_FIX_RATE|PA_STREAM_FIX_CHANNELS|PA_STREAM_EARLY_REQUESTS|PA_STREAM_ADJUST_LATENCY);
     if (ret >= 0) {
         while (pa_mainloop_iterate(ml, 1, &ret) >= 0 &&
                 pa_stream_get_state(stream) == PA_STREAM_CREATING)
@@ -447,6 +448,13 @@ static void pulse_probe_settings(pa_mainloop *ml, pa_context *ctx, int render, W
     if (length)
         pulse_def_period[!render] = pulse_min_period[!render] = pa_bytes_to_usec(10 * length, &ss);
 
+    if (env) {
+        int val = atoi(env);
+        MinimumPeriod = val;
+        DefaultPeriod = val;
+        printf("Set period size to %d (STAGING_PA_PERIOD_SIZE).\n", val);
+    }
+
     if (pulse_min_period[!render] < MinimumPeriod)
         pulse_min_period[!render] = MinimumPeriod;
 
@@ -1739,6 +1747,8 @@ static HRESULT WINAPI AudioClient_Initialize(IAudioClient *iface,
     HRESULT hr = S_OK;
     UINT32 bufsize_bytes;
 
+    const char *env = getenv("STAGING_PA_DURATION");
+
     TRACE("(%p)->(%x, %x, %s, %s, %p, %s)\n", This, mode, flags,
           wine_dbgstr_longlong(duration), wine_dbgstr_longlong(period), fmt, debugstr_guid(sessionguid));
 
@@ -1786,6 +1796,12 @@ static HRESULT WINAPI AudioClient_Initialize(IAudioClient *iface,
     if (duration < 3 * period)
         duration = 3 * period;
 
+    if (env) {
+        int val = atoi(env);
+        printf("Set audio duration to %d from %d (STAGING_PA_DURATION).\n", val, duration);
+        duration = val;
+    }
+
     This->period_bytes = pa_frame_size(&This->ss) * MulDiv(period, This->ss.rate, 10000000);
 
     This->bufsize_frames = ceil((duration / 10000000.) * fmt->nSamplesPerSec);
